// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using EspacioCliente.Data.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace EspacioCliente.Data.Models
{
    public partial class EspacioClienteContext
    {
        private IEspacioClienteContextProcedures _procedures;

        public virtual IEspacioClienteContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new EspacioClienteContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IEspacioClienteContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class EspacioClienteContextProcedures : IEspacioClienteContextProcedures
    {
        private readonly EspacioClienteContext _context;

        public EspacioClienteContextProcedures(EspacioClienteContext context)
        {
            _context = context;
        }

        public virtual async Task<int> AdminBorrarNodosAsync(int? idUsuario, int? idNodo, OutputParameter<bool?> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idNodo",
                    Value = idNodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AdminBorrarNodos] @idUsuario = @idUsuario, @idNodo = @idNodo, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AdminBorrarUsuarioAsync(int? idUsuario, int? id, OutputParameter<bool?> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AdminBorrarUsuario] @idUsuario = @idUsuario, @id = @id, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AdminEditarNodoAsync(int? idUsuario, int? idNodo, string descripcion, OutputParameter<bool?> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idNodo",
                    Value = idNodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "descripcion",
                    Size = 600,
                    Value = descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AdminEditarNodo] @idUsuario = @idUsuario, @idNodo = @idNodo, @descripcion = @descripcion, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AdminGuardarUsuarioAsync(int? idUsuario, int? id, string nombre, string login, int? idRol, OutputParameter<bool?> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nombre",
                    Size = 140,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "login",
                    Size = 100,
                    Value = login ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "idRol",
                    Value = idRol ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AdminGuardarUsuario] @idUsuario = @idUsuario, @id = @id, @nombre = @nombre, @login = @login, @idRol = @idRol, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AdminNuevoNodoAsync(int? idUsuario, int? idNodo, string descripcion, OutputParameter<bool?> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idNodo",
                    Value = idNodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "descripcion",
                    Size = 600,
                    Value = descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AdminNuevoNodo] @idUsuario = @idUsuario, @idNodo = @idNodo, @descripcion = @descripcion, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AdminUsuarioAddNodoAsync(int? idUsuario, int? id, int? idNodo, OutputParameter<bool?> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idNodo",
                    Value = idNodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AdminUsuarioAddNodo] @idUsuario = @idUsuario, @id = @id, @idNodo = @idNodo, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AdminUsuarioEliminarNodoAsync(int? idUsuario, int? id, int? idNodo, OutputParameter<bool?> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idNodo",
                    Value = idNodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AdminUsuarioEliminarNodo] @idUsuario = @idUsuario, @id = @id, @idNodo = @idNodo, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> BriefingCrearAsync(int? idNodo, string descrip, decimal? presupuesto, DateOnly? inicio, DateOnly? fin, int? medio, int? usuarioCreador, OutputParameter<string> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idNodo",
                    Value = idNodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "descrip",
                    Size = 600,
                    Value = descrip ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "presupuesto",
                    Precision = 19,
                    Scale = 4,
                    Value = presupuesto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "inicio",
                    Value = inicio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "fin",
                    Value = fin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "medio",
                    Value = medio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "usuarioCreador",
                    Value = usuarioCreador ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[BriefingCrear] @idNodo = @idNodo, @descrip = @descrip, @presupuesto = @presupuesto, @inicio = @inicio, @fin = @fin, @medio = @medio, @usuarioCreador = @usuarioCreador, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> BriefingSubirAdjuntoAsync(int? idUsuario, int? idBriefing, string descripcion, byte[] contenido, string extension, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idBriefing",
                    Value = idBriefing ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "descripcion",
                    Size = 160,
                    Value = descripcion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "contenido",
                    Size = -1,
                    Value = contenido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "extension",
                    Size = 100,
                    Value = extension ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[BriefingSubirAdjunto] @idUsuario = @idUsuario, @idBriefing = @idBriefing, @descripcion = @descripcion, @contenido = @contenido, @extension = @extension", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IncidenciasConversacionCrearEntradaAsync(int? idUsuario, int? idIncidencia, string texto, byte[] imagen, OutputParameter<string> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idIncidencia",
                    Value = idIncidencia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "texto",
                    Size = 160,
                    Value = texto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "imagen",
                    Size = -1,
                    Value = imagen ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IncidenciasConversacionCrearEntrada] @idUsuario = @idUsuario, @idIncidencia = @idIncidencia, @texto = @texto, @imagen = @imagen, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IncidenciasCrearAsync(int? idUsuario, int? idNodo, string titulo, OutputParameter<string> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idNodo",
                    Value = idNodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "titulo",
                    Size = 160,
                    Value = titulo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IncidenciasCrear] @idUsuario = @idUsuario, @idNodo = @idNodo, @titulo = @titulo, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IncidenciasFinalizarAsync(int? idUsuario, int? idIncidencia, int? idNodo, OutputParameter<string> salida, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parametersalida = new SqlParameter
            {
                ParameterName = "salida",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = salida?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idIncidencia",
                    Value = idIncidencia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idNodo",
                    Value = idNodo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parametersalida,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IncidenciasFinalizar] @idUsuario = @idUsuario, @idIncidencia = @idIncidencia, @idNodo = @idNodo, @salida = @salida OUTPUT", sqlParameters, cancellationToken);

            salida.SetValue(parametersalida.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> IncidenciasMarcarLeidoAsync(int? idUsuario, int? idIncidencia, int? ultimoLeido, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idIncidencia",
                    Value = idIncidencia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ultimoLeido",
                    Value = ultimoLeido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[IncidenciasMarcarLeido] @idUsuario = @idUsuario, @idIncidencia = @idIncidencia, @ultimoLeido = @ultimoLeido", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
